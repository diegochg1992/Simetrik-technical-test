# creacion de vpc
provider "aws" {
  region = var.region
}

resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr

  tags = {
    Name = "${var.vpc_name}-vpc"
  }
}
# creacion de public subnet con igw y tabla de enrutamiento
resource "aws_subnet" "public" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.public_subnet_cidr

  map_public_ip_on_launch = true

  tags = {
    Name = "${var.vpc_name}-public-subnet"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${var.vpc_name}-igw"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "${var.vpc_name}-public-route-table"
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public.id
}
# creacion de subnet privada con natgateway y tabla de enrutamiento
resource "aws_subnet" "private" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_subnet_cidr

  tags = {
    Name = "${var.vpc_name}-private-subnet"
  }
}
resource "aws_eip" "natgateway" {
  vpc = true
}

resource "aws_nat_gateway" "ngtw" {
  allocation_id = aws_eip.natgateway.id
  subnet_id     = aws_subnet.public.id

  tags = {
    Name = "simetrik-nat-gateway"
  }
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.ngtw.id
  }

  tags = {
    Name = "private-route-table"
  }
}

resource "aws_route_table_association" "private_association" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private.id
}

# creacion de Security group para los nodegroups del EKS para permitir la comunicacion entre ellos
resource "aws_security_group" "node-sg" {
  name             = "node-sg"
  vpc_id                 = aws_vpc.main.id
  revoke_rules_on_delete = true
  ingress {
    description = "Allow nodes to communicate with each other"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    self        = true
  }
  egress {
    description = "Allow the nodes to communicate to internet"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  lifecycle {
    ignore_changes = [ingress, egress]
  }
}

# creacion de Security group para que los pods se comuniquen con el cluster EKS
resource "aws_security_group" "eks-additional-sg" {
  name               = "eks-additional-sg"
  vpc_id                 = aws_vpc.main.id
  revoke_rules_on_delete = true
  ingress {
    description     = "Allow pods to communicate with the cluster API Server"
    from_port       = 443
    to_port         = 443
    protocol        = "tcp"
    security_groups = [aws_security_group.node-sg.id]
  }
  egress {
    description     = "Allow the cluster control plane to communicate with worker Kubelet and pods"
    from_port       = 1025
    to_port         = 65535
    protocol        = "tcp"
    security_groups = [aws_security_group.node-sg.id]
  }
  egress {
    description     = "Allow the cluster control plane to communicate with pods running extension API servers on port 443"
    from_port       = 443
    to_port         = 443
    protocol        = "tcp"
    security_groups = [aws_security_group.node-sg.id]
  }
}

resource "aws_security_group_rule" "node-sg-rule-1" {
  description              = "Allow pods running extension API servers on port 443 to receive communication from cluster control plane"
  type                     = "ingress"
  from_port                = 443
  to_port                  = 443
  protocol                 = "tcp"
  security_group_id        = aws_security_group.node-sg.id
  source_security_group_id = aws_security_group.eks-additional-sg.id
}

resource "aws_security_group_rule" "node-sg-rule-2" {
  description              = "Allow worker Kubelets and pods to receive communication from the cluster control plane"
  type                     = "ingress"
  from_port                = 1025
  to_port                  = 65535
  protocol                 = "tcp"
  security_group_id        = aws_security_group.node-sg.id
  source_security_group_id = aws_security_group.eks-additional-sg.id
}
# resource "aws_security_group_rule" "node-sg-rule-3" {
#   description              = "Allow EKS managed nodegroup nodes to communicate with each other in the cluster"
#   type                     = "ingress"
#   from_port                = 0
#   to_port                  = 0
#   protocol                 = "-1"
#   security_group_id        = aws_security_group.node-sg.id
#   source_security_group_id = module.eks-controlplane.cluster_primary_security_group_id
# }

# resource "aws_security_group_rule" "eks-sg-rule-1" {
#   depends_on               = [module.eks-controlplane]
#   description              = "Allow EKS managed nodegroup nodes to communicate with each other in the cluster"
#   type                     = "ingress"
#   from_port                = 0
#   to_port                  = 0
#   protocol                 = "-1"
#   security_group_id        = module.eks-controlplane.cluster_primary_security_group_id
#   source_security_group_id = aws_security_group.node-sg.id
# }